---
name: CI Pipeline
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build_firmware:
    runs-on: ubuntu-latest
    container: gcc:latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y --fix-missing
          apt-get install -y -f
          apt-get install -y cmake libgtest-dev python3 python3-pip \
            python3-venv python3.11-dev libc6-dev libffi-dev \
            default-jre-headless openjdk-17-jre
          wget https://github.com/allure-framework/allure2/releases/download/2.30.0/allure_2.30.0-1_all.deb
          dpkg -i allure_2.30.0-1_all.deb || apt-get install -f -y
          allure --version
          rm allure_2.30.0-1_all.deb
          cd /usr/src/gtest && cmake . && make && cp lib/*.a /usr/lib/

      - name: Clean build
        run: |
          rm -rf build

      - name: Build
        run: |
          mkdir build && cd build
          cmake ..
          make

      - name: Store artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: build/
          retention-days: 7

  unit_tests:
    runs-on: ubuntu-latest
    container: gcc:latest
    needs: build_firmware
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y --fix-missing
          apt-get install -y -f
          apt-get install -y cmake libgtest-dev
          wget https://github.com/allure-framework/allure2/releases/download/2.30.0/allure_2.30.0-1_all.deb
          dpkg -i allure_2.30.0-1_all.deb || apt-get install -f -y
          allure --version
          rm allure_2.30.0-1_all.deb
          cd /usr/src/gtest && cmake . && make && cp lib/*.a /usr/lib/

      - name: Clean unit test results
        run: |
          rm -rf test_results/unit allure-results-unit allure-report-unit

      - name: Create unit test results directory
        run: |
          mkdir -p test_results/unit
          chmod -R 777 test_results/unit

      - name: Debug directory and permissions
        run: |
          echo "Current directory: $PWD"
          echo "GitHub workspace: $GITHUB_WORKSPACE"
          echo "Target XML path: $GITHUB_WORKSPACE/test_results/unit/test_results_unit.xml"
          ls -ld test_results test_results/unit
          stat test_results/unit
          echo "Testing write permission to test_results/unit"
          touch test_results/unit/test_write.txt || \
            echo "Failed to write to test_results/unit"
          ls -l test_results/unit

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: build/

      - name: Set execute permissions
        run: |
          chmod +x build/test_calculator

      - name: Run unit tests with output
        run: |
          cd $GITHUB_WORKSPACE
          echo "Checking test executable:"
          ls -l build/test_calculator || echo "test_calculator not found"
          if [ -f build/test_calculator ]; then
            ./build/test_calculator --gtest_output=xml:test_results/unit/test_results_unit.xml || echo "Unit tests failed"
          else
            echo "Error: Unit tests executable test_calculator not found"
            exit 1
          fi
          ls -l test_results/unit || echo "No files in test_results/unit"

      - name: Debug unit test output
        run: |
          ls -l test_results/unit || echo "Directory test_results/unit not found"
          if [ -f test_results/unit/test_results_unit.xml ]; then
            echo "Unit tests results saved to test_results/unit/test_results_unit.xml:"
            cat test_results/unit/test_results_unit.xml
          else
            echo "Error: test_results/unit/test_results_unit.xml not generated"
            exit 1
          fi

      - name: Generate Allure report for unit tests
        run: |
          mkdir -p allure-results-unit
          cp test_results/unit/test_results_unit.xml allure-results-unit/ || echo "Failed to copy test_results_unit.xml"
          chmod -R 755 allure-results-unit
          allure generate allure-results-unit -o allure-report-unit --clean --verbose || echo "Allure generate failed"
          chmod -R 755 allure-report-unit
          echo "Allure report files:"
          ls -l allure-report-unit || echo "allure-report-unit not generated"
          if [ -f allure-report-unit/index.html ]; then
            echo "Unit report index.html exists"
          else
            echo "Unit report index.html not generated"
            exit 1
          fi

      - name: Store test results
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results
          path: |
            test_results/unit/test_results_unit.xml
            allure-report-unit/
            allure-results-unit/
          retention-days: 7

  integration_tests:
    runs-on: ubuntu-latest
    container: gcc:latest
    needs: [build_firmware, unit_tests]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Verify files
        run: |
          ls -l
          cat requirements.txt

      - name: Update and fix package manager
        run: |
          apt-get update
          apt-get install -y --fix-missing
          apt-get install -y -f

      - name: Install dependencies
        run: |
          apt-get install -y cmake libgtest-dev python3 python3-pip \
            python3-venv python3.11-dev libc6-dev \
            libffi-dev default-jre-headless openjdk-17-jre
          wget https://github.com/allure-framework/allure2/releases/download/2.30.0/allure_2.30.0-1_all.deb
          dpkg -i allure_2.30.0-1_all.deb || apt-get install -f -y
          allure --version
          rm allure_2.30.0-1_all.deb
          python3 --version
          python3 -m venv venv
          ./venv/bin/python -m ensurepip --upgrade
          ./venv/bin/python -m pip install --upgrade pip
          ./venv/bin/pip install -r requirements.txt --no-cache-dir --verbose
          ./venv/bin/pip show pytest allure-pytest

      - name: Clean integration test results
        run: |
          rm -rf test_results/integration  \
            allure-report-integration \
            allure-reports/integration \
            allure-history

      - name: Create integration test results directory
        run: |
          mkdir -p test_results/integration/allure-results
          chmod -R 777 test_results/integration/allure-results
          ls -ld test_results/integration/allure-results

      - name: Download Allure history
        uses: actions/download-artifact@v4
        with:
          name: allure-history # This name must match the upload name later
          path: allure-history # The directory where the artifact will be downloaded
        continue-on-error: true # Important: Allows the workflow to continue if no history artifact is found (e.g., on the first run)
        
      - name: Generate Allure environment and executor info
        run: |
          ALLURE_RESULTS_DIR="test_results/integration/allure-results"
          # environment.properties - provides general test environment details
          echo "OS.Name=$(uname -s)" > "${ALLURE_RESULTS_DIR}/environment.properties"
          echo "OS.Version=$(uname -r)" >> "${ALLURE_RESULTS_DIR}/environment.properties"
          echo "Python.Version=$(python3 -c 'import sys; print(sys.version.split()[0])')" >> "${ALLURE_RESULTS_DIR}/environment.properties"
          echo "Pytest_Version=$(./venv/bin/pytest --version | head -n 1 | awk '{print $2}')" >> "${ALLURE_RESULTS_DIR}/environment.properties"
          echo "Allure_Pytest_Version=$(./venv/bin/pip show allure-pytest | grep Version | awk '{print $2}')" >> "${ALLURE_RESULTS_DIR}/environment.properties"
          echo "Allure_CLI_Version=$(allure --version | head -n 1)" >> "${ALLURE_RESULTS_DIR}/environment.properties"
          echo "Tester=${{ github.actor }}" >> "${ALLURE_RESULTS_DIR}/environment.properties" # Uses the GitHub username
          echo "GitHub.RunId=${{ github.run_id }}" >> "${ALLURE_RESULTS_DIR}/environment.properties"
          echo "GitHub.RunNumber=${{ github.run_number }}" >> "${ALLURE_RESULTS_DIR}/environment.properties"
          echo "GitHub.Workflow=${{ github.workflow }}" >> "${ALLURE_RESULTS_DIR}/environment.properties"
          echo "GitHub.Ref=${{ github.ref }}" >> "${ALLURE_RESULTS_DIR}/environment.properties"
          echo "GitHub.SHA=${{ github.sha }}" >> "${ALLURE_RESULTS_DIR}/environment.properties"
          echo "Repository=${{ github.server_url }}/${{ github.repository }}" >> "${ALLURE_RESULTS_DIR}/environment.properties"
          # executor.json - provides details about the CI system/executor
          cat <<EOF > "${ALLURE_RESULTS_DIR}/executor.json"
          {
            "name": "GitHub Actions",
            "type": "github",
            "url": "${{ github.server_url }}/${{ github.repository }}",
            "buildOrder": "${{ github.run_number }}",
            "buildName": "Build #${{ github.run_number }} (${{ github.ref_name }})",
            "buildUrl": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "reportUrl": "", # Can be filled if you have a stable URL for the Allure report in CI
            "copy": ""
          }
          EOF
          echo "Generated Allure environment and executor files:"
          ls -l "${ALLURE_RESULTS_DIR}"
          cat "${ALLURE_RESULTS_DIR}/environment.properties"
          cat "${ALLURE_RESULTS_DIR}/executor.json"
          
      - name: Download unit test results
        uses: actions/download-artifact@v4
        with:
          name: unit-test-results
          path: unit-test-results/

      - name: Debug downloaded unit test results
        run: |
          echo "Checking downloaded unit-test-results directory:"
          ls -lR unit-test-results || echo "unit-test-results directory not found"
          if [ -d unit-test-results/allure-report-unit ]; then
            echo "Allure report unit files:"
            ls -l unit-test-results/allure-report-unit
            if [ -f unit-test-results/allure-report-unit/index.html ]; then
              echo "Unit report index.html exists in unit-test-results/allure-report-unit"
            else
              echo "Unit report index.html not found in unit-test-results/allure-report-unit"
            fi
          else
            echo "allure-report-unit directory not found in unit-test-results"
          fi

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: build/

      - name: Set execute permissions on libraries
        run: |
          ls -l build/libcalculator.so build/libfibonacci.so || echo "Library files missing"
          chmod +x build/libcalculator.so build/libfibonacci.so || echo "Failed to set execute permissions"
          ls -l build/libcalculator.so build/libfibonacci.so
          echo "Symbols in libcalculator.so:"
          nm -D build/libcalculator.so | grep -E " add|subtract" || echo "No add/subtract symbols found"
          echo "Symbols in libfibonacci.so:"
          nm -D build/libfibonacci.so | grep fibonacci || echo "No fibonacci symbols found"
      
      - name: Run integration tests
        run: |
          echo "Checking library files:"
          ls -l build/libcalculator.so build/libfibonacci.so || echo "Library files missing"
          ldd build/libcalculator.so || echo "Failed to resolve libcalculator.so dependencies"
          ldd build/libfibonacci.so || echo "Failed to resolve libfibonacci.so dependencies"
          export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:./build
          echo "LD_LIBRARY_PATH: $LD_LIBRARY_PATH"
          echo "Test files:"
          ls -l tests/integration/*.py || echo "No test files found"
          ./venv/bin/pip show pytest allure-pytest
          ./venv/bin/pytest --version
          ./venv/bin/pytest tests/integration/ \
            --alluredir=test_results/integration/allure-results \
            --junitxml=test_results/integration/test_results_pytest.xml \
            --verbose || echo "Pytest exited with non-zero code"
          echo "Junit XML output:"
          cat test_results/integration/test_results_pytest.xml || echo "Junit XML not generated"
          echo "Allure results after pytest:"
          ls -l test_results/integration/allure-results || echo "No Allure results generated"
          echo "Generating Allure integration report:"
          allure generate test_results/integration/allure-results -o allure-report-integration --clean || echo "Failed to generate allure-report-integration"
          ls -l allure-report-integration || echo "allure-report-integration not generated"
          find test_results/integration/allure-results -type f
          if ls test_results/integration/allure-results/*.json >/dev/null 2>&1; then
            echo "Sample JSON content (first file):"
            head -n 20 test_results/integration/allure-results/*.json | head -n 20
          else
            echo "No JSON files found in test_results/integration/allure-results"
          fi

      - name: Debug Allure results
        run: |
          ls -ld test_results/integration/allure-results || \
            echo "Directory test_results/integration/allure-results not found"
          ls -l test_results/integration/allure-results || \
            echo "No files in test_results/integration/allure-results"
          if [ -f test_results/integration/allure-results/environment.properties ]; then
            echo "Environment properties:"
            cat test_results/integration/allure-results/environment.properties
          else
            echo "environment.properties not found"
            exit 1
          fi
          echo "Allure result files count (expect ~28):"
          find test_results/integration/allure-results -type f | wc -l
          echo "Allure result files:"
          find test_results/integration/allure-results -type f
          if ls test_results/integration/allure-results/*.json >/dev/null 2>&1; then
            echo "Sample JSON content (first file):"
            head -n 20 test_results/integration/allure-results/*.json | head -n 20
          else
            echo "No JSON files found in test_results/integration/allure-results"
            exit 1
          fi

      - name: Generate Allure report for PyTest
        run: |
          ALLURE_RESULTS_DIR="test_results/integration/allure-results"
          ALLURE_REPORT_DIR="allure-report-integration"
          # Check if previous history exists and copy it into the current results directory
          # Allure automatically looks for a 'history' folder inside the results directory passed to 'generate'
          if [ -d "allure-history/allure-results" ]; then
            echo "Copying history from previous run to current results directory."
            cp -r allure-history/allure-results/history "${ALLURE_RESULTS_DIR}/" || echo "Failed to copy history"
          else
            echo "No previous Allure results found for history."
          fi
          rm -rf "${ALLURE_REPORT_DIR}" # Ensure clean report generation
          chmod -R 777 "${ALLURE_RESULTS_DIR}" # Ensure correct permissions for Allure CLI
          # Generate the report. Allure will automatically use the 'history' subdirectory if present.
          allure generate "${ALLURE_RESULTS_DIR}" -o "${ALLURE_REPORT_DIR}" --clean --verbose || \
            echo "Allure generate failed"
          chmod -R 755 "${ALLURE_REPORT_DIR}"
          echo "Generated report files count (expect ~20-30):"
          find "${ALLURE_REPORT_DIR}" -type f | wc -l
          echo "Generated report files:"
          find "${ALLURE_REPORT_DIR}" -type f
          if [ -f "${ALLURE_REPORT_DIR}/index.html" ]; then
            echo "Report index.html exists"
          else
            echo "Report index.html not generated"
            exit 1
          fi

      - name: Upload Allure results for history
        uses: actions/upload-artifact@v4
        with:
          name: allure-history # This name must match the download name earlier
          path: test_results/integration/allure-results/ # Path to the raw .json, .xml files
          retention-days: 30 # How long to keep this artifact (determines trend depth)
          
      - name: Prepare Allure reports for GitHub Pages
        continue-on-error: true
        run: |
          rm -rf allure-reports/integration
          mkdir -p allure-reports/unit allure-reports/integration
          # Copy unit test report
          if [ -d "unit-test-results/allure-report-unit" ]; then
              cp -r unit-test-results/allure-report-unit/* allure-reports/unit/ || echo "Failed to copy allure-report-unit"
          else
              echo "unit-test-results/allure-report-unit not found, skipping copy."
          fi
          # Copy integration test report
          if [ -d "allure-report-integration" ]; then
              cp -r allure-report-integration/* allure-reports/integration/ || echo "Failed to copy allure-report-integration"
          else
              echo "allure-report-integration not found, skipping copy."
          fi
          chmod -R 755 unit-test-results/allure-report-unit || echo "Failed to set permissions on allure-report-unit"
          chmod -R 755 allure-report-integration || echo "Failed to set permissions on allure-report-integration"
          cp -r unit-test-results/allure-report-unit/* allure-reports/unit/ || echo "Failed to copy allure-report-unit"
          cp -r allure-report-integration/* allure-reports/integration/ || echo "Failed to copy allure-report-integration"
          echo '<!DOCTYPE html>
          <html>
          <head>
            <title>Pytest_Gtest_Project Test Reports</title>
            <style>
              body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
              h1 { color: #333; }
              a { display: inline-block; margin: 10px; padding: 10px 20px; color: #fff; background: #007bff; text-decoration: none; border-radius: 5px; }
              a:hover { background: #0056b3; }
            </style>
          </head>
          <body>
            <h1>Pytest_Gtest_Project Test Reports</h1>
            <p><a href="/Pytest_Gtest_Project/unit/">View Unit Test Reports</a></p>
            <p><a href="/Pytest_Gtest_Project/integration/">View Integration Test Reports</a></p>
          </body>
          </html>' > allure-reports/index.html
          echo "Unit report files after copy:"
          ls -lR allure-reports/unit || echo "No files in allure-reports/unit"
          echo "Integration report files after copy:"
          ls -l allure-reports/integration || echo "No files in allure-reports/integration"
          if [ -f allure-reports/unit/index.html ]; then
            echo "Unit index.html exists in allure-reports/unit"
          else
            echo "Unit index.html not found in allure-reports/unit"
          fi

      - name: Deploy Allure reports to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: allure-reports
          publish_branch: gh-pages
          keep_files: false
