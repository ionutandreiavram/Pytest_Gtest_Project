{"uid":"eb1be2161af987c4","name":"test_fibonacci[-1--1]","fullName":"tests.integration.test_fibonacci.TestFibonacciFunctionality#test_fibonacci","historyId":"326aae6b1f5763fb182e90e625f18163","time":{"start":1752917376338,"stop":1752917376338,"duration":0},"description":"Tests the C Fibonacci function with various valid inputs.\n                          Args: \n                          n (uint64): The input number for the Fibonacci calculation.\n                          expected (uint64): The expected Fibonacci result for 'n'.","descriptionHtml":"<p>Tests the C Fibonacci function with various valid inputs.<br />\nArgs:<br />\nn (uint64): The input number for the Fibonacci calculation.<br />\nexpected (uint64): The expected Fibonacci result for 'n'.</p>\n","status":"broken","statusMessage":"TypeError: _argtypes_ must be a sequence of types","statusTrace":"self = <test_fibonacci.TestFibonacciFunctionality object at 0x7f5310025290>\nn = -1, expected = -1\n\n    @allure.story(\"Fibonacci Calculation\")\n    @allure.description(\"Tests the C Fibonacci function with various valid inputs.\\n \\\n                         Args: \\n \\\n                         n (uint64): The input number for the Fibonacci calculation.\\n \\\n                         expected (uint64): The expected Fibonacci result for 'n'.\")\n    @pytest.mark.parametrize(\"n, expected\", [\n        (0, 0), # Test case 1 -  Fibonacci(0) = 0\n        (1, 0), # Test case 2 -  Fibonacci(1) = 0\n        (2, 1), # Test case 3 -  Fibonacci(2) = 1\n        (3, 2), # Test case 4 -  Fibonacci(3) = 2\n        (4, 3), # Test case 5 -  Fibonacci(4) = 3\n        (5, 5), # Test case 6 -  Fibonacci(5) = 5\n        (6, 8), # Test case 7 -  Fibonacci(6) = 8\n        (7, 13), # Test case 8 -  Fibonacci(7) = 13\n        (8, 21), # Test case 9 -  Fibonacci(8) = 21\n        (9, 34), # Test case 10 -  Fibonacci(9) = 34\n        (10, 55), # Test case 11 -  Fibonacci(10) = 55\n        (20, 6765), # Test case 12 -  Fibonacci(20) = 6765\n        (30, 832040), # Test case 13 -  Fibonacci(30) = 832040\n        (50, 12586269025), # Test case 14 -  Fibonacci(50) = 12586269025\n        (60, 1548008755920), # Test case 15 -  Fibonacci(60) = 1548008755920\n        (93, 12200160415121876738), # Test case 16 - Fibonacci(93) = 12200160415121876738\n        (-1, -1) # Test case 17 - Fibonacci(17) = -1\n    ])\n    def test_fibonacci(self, n, expected):\n        \"\"\"\n        Tests the C Fibonacci function with various valid inputs.\n    \n        Args:\n            n (uint64): The input number for the Fibonacci calculation.\n            expected (uint64): The expected Fibonacci result for 'n'.\n        \"\"\"\n        with allure.step(f\"Validate input n={n}\"):\n             allure.attach(f\"Input parameter is {n}\", name=\"Input Validation\", attachment_type=allure.attachment_type.TEXT)\n             if n < 0:\n                self.lib.fibonacci.argtypes = [ctypes.c_int64]\n>               self.lib.fibonacci.argtypes = ctypes.c_int64\nE               TypeError: _argtypes_ must be a sequence of types\n\ntests/integration/test_fibonacci.py:86: TypeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_xunit_setup_class_fixture_TestFibonacciFunctionality","time":{"start":1752917376255,"stop":1752917376255,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Tests the C Fibonacci function with various valid inputs.\n                          Args: \n                          n (uint64): The input number for the Fibonacci calculation.\n                          expected (uint64): The expected Fibonacci result for 'n'.","status":"broken","statusMessage":"TypeError: _argtypes_ must be a sequence of types","statusTrace":"self = <test_fibonacci.TestFibonacciFunctionality object at 0x7f5310025290>\nn = -1, expected = -1\n\n    @allure.story(\"Fibonacci Calculation\")\n    @allure.description(\"Tests the C Fibonacci function with various valid inputs.\\n \\\n                         Args: \\n \\\n                         n (uint64): The input number for the Fibonacci calculation.\\n \\\n                         expected (uint64): The expected Fibonacci result for 'n'.\")\n    @pytest.mark.parametrize(\"n, expected\", [\n        (0, 0), # Test case 1 -  Fibonacci(0) = 0\n        (1, 0), # Test case 2 -  Fibonacci(1) = 0\n        (2, 1), # Test case 3 -  Fibonacci(2) = 1\n        (3, 2), # Test case 4 -  Fibonacci(3) = 2\n        (4, 3), # Test case 5 -  Fibonacci(4) = 3\n        (5, 5), # Test case 6 -  Fibonacci(5) = 5\n        (6, 8), # Test case 7 -  Fibonacci(6) = 8\n        (7, 13), # Test case 8 -  Fibonacci(7) = 13\n        (8, 21), # Test case 9 -  Fibonacci(8) = 21\n        (9, 34), # Test case 10 -  Fibonacci(9) = 34\n        (10, 55), # Test case 11 -  Fibonacci(10) = 55\n        (20, 6765), # Test case 12 -  Fibonacci(20) = 6765\n        (30, 832040), # Test case 13 -  Fibonacci(30) = 832040\n        (50, 12586269025), # Test case 14 -  Fibonacci(50) = 12586269025\n        (60, 1548008755920), # Test case 15 -  Fibonacci(60) = 1548008755920\n        (93, 12200160415121876738), # Test case 16 - Fibonacci(93) = 12200160415121876738\n        (-1, -1) # Test case 17 - Fibonacci(17) = -1\n    ])\n    def test_fibonacci(self, n, expected):\n        \"\"\"\n        Tests the C Fibonacci function with various valid inputs.\n    \n        Args:\n            n (uint64): The input number for the Fibonacci calculation.\n            expected (uint64): The expected Fibonacci result for 'n'.\n        \"\"\"\n        with allure.step(f\"Validate input n={n}\"):\n             allure.attach(f\"Input parameter is {n}\", name=\"Input Validation\", attachment_type=allure.attachment_type.TEXT)\n             if n < 0:\n                self.lib.fibonacci.argtypes = [ctypes.c_int64]\n>               self.lib.fibonacci.argtypes = ctypes.c_int64\nE               TypeError: _argtypes_ must be a sequence of types\n\ntests/integration/test_fibonacci.py:86: TypeError","steps":[{"name":"Validate input n=-1","time":{"start":1752917376338,"stop":1752917376338,"duration":0},"status":"broken","statusMessage":"TypeError: _argtypes_ must be a sequence of types\n","statusTrace":"  File \"/__w/Pytest_Gtest_Project/Pytest_Gtest_Project/tests/integration/test_fibonacci.py\", line 86, in test_fibonacci\n    self.lib.fibonacci.argtypes = ctypes.c_int64\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[{"uid":"e95b2efa8fe3e341","name":"Input Validation","source":"e95b2efa8fe3e341.txt","type":"text/plain","size":21}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"d976c0dc625dc1b1","name":"stdout","source":"d976c0dc625dc1b1.txt","type":"text/plain","size":66}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"_xunit_setup_class_fixture_TestFibonacciFunctionality::0","time":{"start":1752917376343,"stop":1752917376343,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"Fibonacci Integration Tests"},{"name":"tester","value":"Ionut"},{"name":"story","value":"Fibonacci Calculation"},{"name":"test_type","value":"integration"},{"name":"severity","value":"normal"},{"name":"parentSuite","value":"tests.integration"},{"name":"suite","value":"test_fibonacci"},{"name":"subSuite","value":"TestFibonacciFunctionality"},{"name":"host","value":"3d97c213934c"},{"name":"thread","value":"2293-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.integration.test_fibonacci"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expected","value":"-1"},{"name":"n","value":"-1"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"eb1be2161af987c4.json","parameterValues":["-1","-1"]}