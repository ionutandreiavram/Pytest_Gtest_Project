{"uid":"f1a1fed2ffa08f45","name":"test_fibonacci[6-13]","fullName":"tests.integration.test_fibonacci.TestFibonacciFunctionality#test_fibonacci","historyId":"7a27335bcdd7e2d7bcb81339b80e5215","time":{"start":1752928934452,"stop":1752928934453,"duration":1},"description":"Tests the C Fibonacci function with various valid inputs.\n                          Args: \n                          n (uint64): The input number for the Fibonacci calculation.\n                          expected (uint64): The expected Fibonacci result for 'n'.","descriptionHtml":"<p>Tests the C Fibonacci function with various valid inputs.<br />\nArgs:<br />\nn (uint64): The input number for the Fibonacci calculation.<br />\nexpected (uint64): The expected Fibonacci result for 'n'.</p>\n","status":"failed","statusMessage":"AssertionError: Result should be 13, but is 8\nassert 8 == 13","statusTrace":"self = <test_fibonacci.TestFibonacciFunctionality object at 0x7f39dd863690>\nn = 6, expected = 13\n\n    @allure.story(\"Fibonacci Calculation\")\n    @allure.description(\"Tests the C Fibonacci function with various valid inputs.\\n \\\n                         Args: \\n \\\n                         n (uint64): The input number for the Fibonacci calculation.\\n \\\n                         expected (uint64): The expected Fibonacci result for 'n'.\")\n    @pytest.mark.parametrize(\"n, expected\", [\n        (0, 0), # Test case 1 -  Fibonacci(0) = 0\n        (1, 0), # Test case 2 -  Fibonacci(1) = 0\n        (2, 1), # Test case 3 -  Fibonacci(2) = 1\n        (3, 2), # Test case 4 -  Fibonacci(3) = 2\n        (4, 3), # Test case 5 -  Fibonacci(4) = 3\n        (5, 5), # Test case 6 -  Fibonacci(5) = 5\n        (6, 8), # Test case 7 -  Fibonacci(6) = 8\n        (6, 13), # Test case 8 -  Fibonacci(7) = 13\n        (8, 21), # Test case 9 -  Fibonacci(8) = 21\n        (9, 34), # Test case 10 -  Fibonacci(9) = 34\n        (10, 55), # Test case 11 -  Fibonacci(10) = 55\n        (20, 6765), # Test case 12 -  Fibonacci(20) = 6765\n        (30, 832040), # Test case 13 -  Fibonacci(30) = 832040\n        (50, 12586269025), # Test case 14 -  Fibonacci(50) = 12586269025\n        (60, 1548008755920), # Test case 15 -  Fibonacci(60) = 1548008755920\n        (93, 12200160415121876738), # Test case 16 - Fibonacci(93) = 12200160415121876738\n    ])\n    def test_fibonacci(self, n, expected):\n        \"\"\"\n        Tests the C Fibonacci function with various valid inputs.\n    \n        Args:\n            n (uint64): The input number for the Fibonacci calculation.\n            expected (uint64): The expected Fibonacci result for 'n'.\n        \"\"\"\n        with allure.step(f\"Validate input n={n}\"):\n             allure.attach(f\"Input parameter is {n}\", name=\"Input Validation\", attachment_type=allure.attachment_type.TEXT)\n    \n        with allure.step(f\"Compute fibonacci({n})\"):\n            result = self.lib.fibonacci(n)\n            allure.attach(f\"Input: n={n}\\nExpected: {expected}\\nActual: {result}\",\n                          name=\"Test Data\",\n                          attachment_type=allure.attachment_type.TEXT)\n    \n        with allure.step(f\"Verify result for fibonacci({n})\"):\n>           assert result == expected, f\"Result should be {expected}, but is {result}\"\nE           AssertionError: Result should be 13, but is 8\nE           assert 8 == 13\n\ntests/integration/test_fibonacci.py:91: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_xunit_setup_class_fixture_TestFibonacciFunctionality","time":{"start":1752928934436,"stop":1752928934437,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Tests the C Fibonacci function with various valid inputs.\n                          Args: \n                          n (uint64): The input number for the Fibonacci calculation.\n                          expected (uint64): The expected Fibonacci result for 'n'.","status":"failed","statusMessage":"AssertionError: Result should be 13, but is 8\nassert 8 == 13","statusTrace":"self = <test_fibonacci.TestFibonacciFunctionality object at 0x7f39dd863690>\nn = 6, expected = 13\n\n    @allure.story(\"Fibonacci Calculation\")\n    @allure.description(\"Tests the C Fibonacci function with various valid inputs.\\n \\\n                         Args: \\n \\\n                         n (uint64): The input number for the Fibonacci calculation.\\n \\\n                         expected (uint64): The expected Fibonacci result for 'n'.\")\n    @pytest.mark.parametrize(\"n, expected\", [\n        (0, 0), # Test case 1 -  Fibonacci(0) = 0\n        (1, 0), # Test case 2 -  Fibonacci(1) = 0\n        (2, 1), # Test case 3 -  Fibonacci(2) = 1\n        (3, 2), # Test case 4 -  Fibonacci(3) = 2\n        (4, 3), # Test case 5 -  Fibonacci(4) = 3\n        (5, 5), # Test case 6 -  Fibonacci(5) = 5\n        (6, 8), # Test case 7 -  Fibonacci(6) = 8\n        (6, 13), # Test case 8 -  Fibonacci(7) = 13\n        (8, 21), # Test case 9 -  Fibonacci(8) = 21\n        (9, 34), # Test case 10 -  Fibonacci(9) = 34\n        (10, 55), # Test case 11 -  Fibonacci(10) = 55\n        (20, 6765), # Test case 12 -  Fibonacci(20) = 6765\n        (30, 832040), # Test case 13 -  Fibonacci(30) = 832040\n        (50, 12586269025), # Test case 14 -  Fibonacci(50) = 12586269025\n        (60, 1548008755920), # Test case 15 -  Fibonacci(60) = 1548008755920\n        (93, 12200160415121876738), # Test case 16 - Fibonacci(93) = 12200160415121876738\n    ])\n    def test_fibonacci(self, n, expected):\n        \"\"\"\n        Tests the C Fibonacci function with various valid inputs.\n    \n        Args:\n            n (uint64): The input number for the Fibonacci calculation.\n            expected (uint64): The expected Fibonacci result for 'n'.\n        \"\"\"\n        with allure.step(f\"Validate input n={n}\"):\n             allure.attach(f\"Input parameter is {n}\", name=\"Input Validation\", attachment_type=allure.attachment_type.TEXT)\n    \n        with allure.step(f\"Compute fibonacci({n})\"):\n            result = self.lib.fibonacci(n)\n            allure.attach(f\"Input: n={n}\\nExpected: {expected}\\nActual: {result}\",\n                          name=\"Test Data\",\n                          attachment_type=allure.attachment_type.TEXT)\n    \n        with allure.step(f\"Verify result for fibonacci({n})\"):\n>           assert result == expected, f\"Result should be {expected}, but is {result}\"\nE           AssertionError: Result should be 13, but is 8\nE           assert 8 == 13\n\ntests/integration/test_fibonacci.py:91: AssertionError","steps":[{"name":"Validate input n=6","time":{"start":1752928934452,"stop":1752928934452,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"5d5bc8e8278bdc5f","name":"Input Validation","source":"5d5bc8e8278bdc5f.txt","type":"text/plain","size":20}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"Compute fibonacci(6)","time":{"start":1752928934452,"stop":1752928934452,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"f43bbddaaf990d91","name":"Test Data","source":"f43bbddaaf990d91.txt","type":"text/plain","size":33}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"Verify result for fibonacci(6)","time":{"start":1752928934452,"stop":1752928934452,"duration":0},"status":"failed","statusMessage":"AssertionError: Result should be 13, but is 8\nassert 8 == 13\n","statusTrace":"  File \"/__w/Pytest_Gtest_Project/Pytest_Gtest_Project/tests/integration/test_fibonacci.py\", line 91, in test_fibonacci\n    assert result == expected, f\"Result should be {expected}, but is {result}\"\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"_xunit_setup_class_fixture_TestFibonacciFunctionality::0","time":{"start":1752928934485,"stop":1752928934485,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"story","value":"Fibonacci Calculation"},{"name":"test_type","value":"integration"},{"name":"feature","value":"Fibonacci Integration Tests"},{"name":"severity","value":"normal"},{"name":"tester","value":"Ionut"},{"name":"parentSuite","value":"tests.integration"},{"name":"suite","value":"test_fibonacci"},{"name":"subSuite","value":"TestFibonacciFunctionality"},{"name":"host","value":"3f8771132d5b"},{"name":"thread","value":"2370-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.integration.test_fibonacci"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expected","value":"13"},{"name":"n","value":"6"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"f1a1fed2ffa08f45.json","parameterValues":["13","6"]}