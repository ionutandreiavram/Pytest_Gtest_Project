{"uid":"ecaa3f6dccace996","name":"test_fibonacci[1-1]","historyId":"pytest:tests.integration.test_fibonacci#test_fibonacci[1-1]","time":{"start":1752878929079,"stop":1752878929081,"duration":2},"status":"failed","statusMessage":"AssertionError: Should be 1, but is 0\nassert 0 == 1","statusTrace":"n = 1, expected = 1\n\n    @allure.feature(\"Fibonacci Integration Tests\")\n    @allure.story(\"Fibonacci Calculation\")\n    @allure.description(\"Test the Fibonacci functionality with multiple input combinations.\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @allure.label(\"tester\", \"Ionut\")\n    @allure.label(\"test_type\", \"integration\")\n    @pytest.mark.parametrize(\"n, expected\", [\n        (0, 0), # Test case 1 -  Fibonacci(0) = 0\n        (1, 1), # Test case 2 -  Fibonacci(1) = 1\n        (2, 1), # Test case 3 -  Fibonacci(2) = 1\n        (3, 2), # Test case 4 -  Fibonacci(3) = 2\n        (4, 3), # Test case 5 -  Fibonacci(4) = 3\n        (5, 5), # Test case 6 -  Fibonacci(5) = 5\n        (6, 8), # Test case 7 -  Fibonacci(6) = 8\n        (7, 13), # Test case 8 -  Fibonacci(7) = 13\n        (8, 21), # Test case 9 -  Fibonacci(8) = 21\n        (9, 34), # Test case 10 -  Fibonacci(9) = 34\n        (10, 55), # Test case 11 -  Fibonacci(10) = 55\n        (20, 6765), # Test case 12 -  Fibonacci(20) = 6765\n        (30, 832040), # Test case 13 -  Fibonacci(30) = 832040\n        (50, 12586269025), # Test case 14 -  Fibonacci(50) = 12586269025\n        (60, 1548008755920) # Test case 15 -  Fibonacci(60) = 1548008755920\n    \n    ])\n    def test_fibonacci(n, expected):\n        with allure.step(f\"Validate input n={n}\"):\n            allure.attach(f\"Input parameter is {n}\", name=\"Input Validation\", attachment_type=allure.attachment_type.TEXT)\n            assert n>=0, f\"Input is {n} and should be positive\"\n        with allure.step(f\"Compute fibonacci({n})\"):\n            result = lib.fibonacci(n)\n            allure.attach(f\"Input: n={n}\\nExpected: {expected}\\nActual: {result}\",\n                          name=\"Test Data\",\n                          attachment_type=allure.attachment_type.TEXT)\n        with allure.step(f\"Verify result for fibonacci({n})\"):\n>           assert result == expected, f\"Should be {expected}, but is {result}\"\nE           AssertionError: Should be 1, but is 0\nE           assert 0 == 1\n\ntests/integration/test_fibonacci.py:46: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"051d05bea1ff"},{"name":"testClass","value":"tests.integration.test_fibonacci"},{"name":"package","value":"tests.integration.test_fibonacci"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"ecaa3f6dccace996.json","parameterValues":[]}